[%
# summary.tt
# jt6 20060925 WTSI
# 
# build the summary block for the help pages
#
# $Id: summary.tt,v 1.4 2009-06-10 10:46:27 jt6 Exp $

#-------------------------------------------------------------------------------
# specify required stylesheets and javascript files 
#-------------------------------------------------------------------------------

%]

    
<!-- start summary block -->
<div class="block" id="browseSpeciesTreeBlock">
	<div class="handle">
		<h1>Species Tree</h1>
	</div>
	<div class="blockContent">
	<div id="treefamSpeciesTree" style="position:absolut;top:0;right:100;">
	<div class='gallery' id='chart'> </div>
	<div id="pop-up" style="width:400px; height:60px; ">
			<div id="pop-up-title"></div>
			<div id="pop-up-content">
				<table> <tr>
					<td><div id="pop-img"></div></td>
					<td><div id="pop-desc"></div></td>
				</tr> </table>
			</div>
		</div>
	</div> 
	<div id="treefamSpeciesTreeOld" style="position:absolut;top:0;right:100;">
<script type="text/javascript">

var width = 1100,
    height = 2200;

var cluster = d3.layout.cluster().size([height, width - 160]);

var diagonal = d3.svg.diagonal().projection(function(d) { return [d.y, d.x]; });

var vis = d3.select("#chart").append("svg")
    .attr("width", width)
    .attr("height", height)
  .append("g")
    .attr("transform", "translate(0, 0)");

d3.json("[% c.uri_for( "/static/trees/treefam9.json" ) %] ", function(json) {
  var nodes = cluster.nodes(json);

  var link = vis.selectAll("path.link")
      .data(cluster.links(nodes))
    .enter().append("path")
      .attr("class", "link")
      .attr("d", diagonal);

  var node = vis.selectAll("g.node")
      .data(nodes)
    .enter().append("g")
      .attr("class", "node")
      .attr("transform", function(d) { return "translate(" + d.y + "," + d.x + ")"; })

  node.append("circle")
      .attr("r", 4.5);
  node.append("text")
      .attr("dx", function(d) { 
      	return d.children ? -100 : 35; 
      })
      .attr("dy",11)
      .attr("text-anchor", function(d) { return d.children ? "end" : "start"; })
      .text(function(d) { return  d.name; });
 node.append("svg:image")
      .attr("width", "2%")
      .attr("height", "2%")
      .attr("x", "10")
      .attr("y", "-25")
      
      //.attr("text-anchor", function(d) { return d.children || d._children ? "end" : "start"; })
      //.text(function(d) { return d.name; })
      .attr("xlink:href", function(d) { return d.children || d._children ? "" : "static/images/species_pictures/species_files/thumb_" + d.name + ".png"; })
      //.style("fill-opacity", 1e-6)
      ;

});
function update(source) {
  var duration = d3.event && d3.event.altKey ? 5000 : 500;

  // Compute the new tree layout.
  var nodes = tree.nodes(root).reverse();

  // Normalize for fixed-depth.
  //nodes.forEach(function(d) { d.y = d.depth * 50; });

  // Update the nodes…
//  var node = vis.selectAll("g.node")
//      .data(nodes, function(d) { return d.id || (d.id = ++i); });
var node = vis.selectAll("g.node")
       .data(nodes)
  //   .enter().append("g")
       .attr("class", "node")
       .attr("transform", function(d) { return "translate(" + d.y + "," + d.x + ")"; })

  // Enter any new nodes at the parent's previous position.
  var nodeEnter = node.enter().append("svg:g")
      .attr("class", "node")
      //.attr("transform", function(d) { return "translate(" + source.y0 + "," + source.x0 + ")"; })
      .attr("transform", function(d) { return "translate(" + source.x0 + "," + source.y0 + ")"; })
      
	.on("click", function(d) { toggle(d); update(d); })
	.on("mouseover",function (d) {
				if (!d.children){
					jQuery("#pop-up").fadeOut(100,function () {
					// Popup content
					jQuery("#pop-up-title").html(d.purpose);
						var myImageFile ="static/images/species_pictures/species_files/thumb_" + d.name + ".png";  
						jQuery("#pop-img").html("<img src=\"" + myImageFile + "\" />");
						jQuery("#pop-desc").html("   species: " + d.name + ".");
						// Popup position
						jQuery("#pop-up").css({"left":100,"top":100});
						jQuery("#pop-up").fadeIn(10);
        					});
					jQuery(this).attr("fill","url(#act1)");
				}
			});

  nodeEnter.append("svg:circle")
      .attr("r", 1e-6)
       .style("fill", function(d) { return d._children ? "lightsteelblue" : "#fff"; });
nodeEnter.append("svg:image")
      .attr("width", "2%")
      .attr("height", "2%")
      .attr("x", "10")
      .attr("y", "-10")
      
      //.attr("text-anchor", function(d) { return d.children || d._children ? "end" : "start"; })
      //.text(function(d) { return d.name; })
      .attr("xlink:href", function(d) { return d.children || d._children ? "" : "static/images/species_pictures/species_files/thumb_" + d.name + ".png"; })
      //.style("fill-opacity", 1e-6)
      ;

  nodeEnter.append("svg:text")
      .attr("x", function(d) { return d.children || d._children ? -10 : 10; })
      .attr("dy", ".35em")
      .attr("text-anchor", function(d) { return d.children || d._children ? "end" : "start"; })
      .text(function(d) { return d.name; })
     .style("fill-opacity", 1e-6);
     

  // Transition nodes to their new position.
  var nodeUpdate = node.transition()
      .duration(duration)
      .attr("transform", function(d) { return "translate(" + d.y + "," + d.x + ")"; });

  nodeUpdate.select("circle")
      .attr("r", 4.5)
      .style("fill", function(d) { return d._children ? "lightsteelblue" : "#fff"; });

  nodeUpdate.select("text")
      .style("fill-opacity", 1);

  // Transition exiting nodes to the parent's new position.
  var nodeExit = node.exit().transition()
      .duration(duration)
      .attr("transform", function(d) { return "translate(" + source.y + "," + source.x + ")"; })
      .remove();

  nodeExit.select("circle")
      .attr("r", 1e-6);

  nodeExit.select("text")
      .style("fill-opacity", 1e-6);

  // Update the links…
  var link = vis.selectAll("path.link")
      .data(tree.links(nodes), function(d) { return d.target.id; });

  // Enter any new links at the parent's previous position.
  link.enter().insert("svg:path", "g")
      .attr("class", "link")
      .attr("d", function(d) {
        var o = {x: source.x0, y: source.y0};
        return diagonal({source: o, target: o});
      })
    .transition()
      .duration(duration)
      .attr("d", diagonal);

  // Transition links to their new position.
  link.transition()
      .duration(duration)
      .attr("d", diagonal);

  // Transition exiting nodes to the parent's new position.
  link.exit().transition()
      .duration(duration)
      .attr("d", function(d) {
        var o = {x: source.x, y: source.y};
        return diagonal({source: o, target: o});
      })
      .remove();

  // Stash the old positions for transition.
  nodes.forEach(function(d) {
    d.x0 = d.x;
    d.y0 = d.y;
  });
}


</script>
<!-- 
<script type="text/javascript">

var m = [20, 120, 20, 120],
	w = 1050,
    h = 2500,
    i = 0,
    duration = 500,
    root;

var tree = d3.layout.tree().size([h, w - 160]);
var diagonal = d3.svg.diagonal()
    .projection(function(d) { return [d.y, d.x]; });

//var vis = d3.select("#treefamSpeciesTree").append("svg:svg")
//    .attr("width", w + m[1] + m[3])
//    .attr("height", h + m[0] + m[2])
//  .append("svg:g")
//    .attr("transform", "translate(" + m[3] + "," + m[0] + ")");

var vis = d3.select("#treefamSpeciesTreeOld").append("svg:svg")
    .attr("width", w)
    .attr("height", h)
    .append("svg:g")
    //.call(d3.behavior.zoom().on("zoom", redraw))
    .attr("transform", "translate(70,50)");
    
//function redraw() {
//  console.log("here", d3.event.translate, d3.event.scale);
//  vis.attr("transform",
//      "translate(" + d3.event.translate + ")"
//      + " scale(" + d3.event.scale + ")");
//}


console.log("reading flare.json");
d3.json("[% c.uri_for( "/static/trees/treefam9.json_backup" ) %]", function(json) {
 json.x0 = 0;
  json.y0 = 0;
  update(root = json);
 // root = json;
	console.log("h is %s", h);
 // root.x0 = h / 2;
//  root.y0 = 0;
 console.log("root x %s ", root.x0);
 console.log("root y %s ", root.y0);

console.log("just a test");
  function toggleAll(d) {
    if (d.children) {
      d.children.forEach(toggleAll);
      toggle(d);
    }
  }
console.log("in d3 function");
  // Initialize the display to show a few nodes.
  //root.children.forEach(toggleAll);
  //toggle(root.children[3]);
  //toggle(root.children[1]);
  //toggle(root.children[1].children[2]);
  //toggle(root.children[9]);
  //toggle(root.children[9].children[0]);

  //update(root = json);
});

function update(source) {
  var duration = d3.event && d3.event.altKey ? 5000 : 500;

  // Compute the new tree layout.
  var nodes = tree.nodes(root).reverse();

  // Normalize for fixed-depth.
  //nodes.forEach(function(d) { d.y = d.depth * 50; });

  // Update the nodes…
//  var node = vis.selectAll("g.node")
//      .data(nodes, function(d) { return d.id || (d.id = ++i); });
var node = vis.selectAll("g.node")
       .data(nodes)
  //   .enter().append("g")
       .attr("class", "node")
       .attr("transform", function(d) { return "translate(" + d.y + "," + d.x + ")"; })

  // Enter any new nodes at the parent's previous position.
  var nodeEnter = node.enter().append("svg:g")
      .attr("class", "node")
      //.attr("transform", function(d) { return "translate(" + source.y0 + "," + source.x0 + ")"; })
      .attr("transform", function(d) { return "translate(" + source.x0 + "," + source.y0 + ")"; })
      
	.on("click", function(d) { toggle(d); update(d); })
	.on("mouseover",function (d) {
				if (!d.children){
					jQuery("#pop-up").fadeOut(100,function () {
					// Popup content
					jQuery("#pop-up-title").html(d.purpose);
						var myImageFile ="static/images/species_pictures/species_files/thumb_" + d.name + ".png";  
						jQuery("#pop-img").html("<img src=\"" + myImageFile + "\" />");
						jQuery("#pop-desc").html("   species: " + d.name + ".");
						// Popup position
						jQuery("#pop-up").css({"left":100,"top":100});
						jQuery("#pop-up").fadeIn(10);
        					});
					jQuery(this).attr("fill","url(#act1)");
				}
				});

  nodeEnter.append("svg:circle")
      .attr("r", 1e-6)
       .style("fill", function(d) { return d._children ? "lightsteelblue" : "#fff"; });
nodeEnter.append("svg:image")
      .attr("width", "2%")
      .attr("height", "2%")
      .attr("x", "10")
      .attr("y", "-10")
      
      //.attr("text-anchor", function(d) { return d.children || d._children ? "end" : "start"; })
      //.text(function(d) { return d.name; })
      .attr("xlink:href", function(d) { return d.children || d._children ? "" : "static/images/species_pictures/species_files/thumb_" + d.name + ".png"; })
      //.style("fill-opacity", 1e-6)
      ;

  nodeEnter.append("svg:text")
      .attr("x", function(d) { return d.children || d._children ? -10 : 10; })
      .attr("dy", ".35em")
      .attr("text-anchor", function(d) { return d.children || d._children ? "end" : "start"; })
      .text(function(d) { return d.name; })
     .style("fill-opacity", 1e-6);
     

  // Transition nodes to their new position.
  var nodeUpdate = node.transition()
      .duration(duration)
      .attr("transform", function(d) { return "translate(" + d.y + "," + d.x + ")"; });

  nodeUpdate.select("circle")
      .attr("r", 4.5)
      .style("fill", function(d) { return d._children ? "lightsteelblue" : "#fff"; });

  nodeUpdate.select("text")
      .style("fill-opacity", 1);

  // Transition exiting nodes to the parent's new position.
  var nodeExit = node.exit().transition()
      .duration(duration)
      .attr("transform", function(d) { return "translate(" + source.y + "," + source.x + ")"; })
      .remove();

  nodeExit.select("circle")
      .attr("r", 1e-6);

  nodeExit.select("text")
      .style("fill-opacity", 1e-6);

  // Update the links…
  var link = vis.selectAll("path.link")
      .data(tree.links(nodes), function(d) { return d.target.id; });

  // Enter any new links at the parent's previous position.
  link.enter().insert("svg:path", "g")
      .attr("class", "link")
      .attr("d", function(d) {
        var o = {x: source.x0, y: source.y0};
        return diagonal({source: o, target: o});
      })
    .transition()
      .duration(duration)
      .attr("d", diagonal);

  // Transition links to their new position.
  link.transition()
      .duration(duration)
      .attr("d", diagonal);

  // Transition exiting nodes to the parent's new position.
  link.exit().transition()
      .duration(duration)
      .attr("d", function(d) {
        var o = {x: source.x, y: source.y};
        return diagonal({source: o, target: o});
      })
      .remove();

  // Stash the old positions for transition.
  nodes.forEach(function(d) {
    d.x0 = d.x;
    d.y0 = d.y;
  });
}

// Toggle children.
function toggle(d) {
  if (d.children) {
    d._children = d.children;
    d.children = null;
  } else {
    d.children = d._children;
    d._children = null;
  }
}

    </script>
    -->
</div>
</div>
<!-- end summary block -->

[%#
Copyright (c) 2007: Genome Research Ltd.

Authors: Rob Finn (rdf@sanger.ac.uk), John Tate (jt6@sanger.ac.uk), 
	Jennifer Daub (jd7@sanger.ac.uk) and Paul Gardner (pg5@sanger.ac.uk)

	This is free software; you can redistribute it and/or modify it under
	the terms of the GNU General Public License as published by the Free Software
	Foundation; either version 2 of the License, or (at your option) any later
	version.

	This program is distributed in the hope that it will be useful, but WITHOUT
	ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
	FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
	details.

	You should have received a copy of the GNU General Public License along with
	this program. If not, see <http://www.gnu.org/licenses/>.
	-%]
